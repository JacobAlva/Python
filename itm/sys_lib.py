# this file contains several examples of uses of the sys library.


import sys
import timeit

# compare the size of tuple and list in "bytes"
tuple8 = ("what", "is", "your", "name?", 373, "watermelon")
list3 = ["what", "is", "your", "name?", 373, "watermelon"]
print(sys.getsizeof(tuple8), "bytes")
print(sys.getsizeof(list3), "bytes")
# the results show that a tuple is more memory efficient


#compare speed of tuple vs list
print(timeit.timeit(stmt="(0, 1, 2, 3, 4, 5)", number=1000000))
print(timeit.timeit(stmt="[0, 1, 2, 3, 4, 5]", number=1000000))
# the results show the tuple is almost 10x faster than the list
# Thus, working with tuples can be more efficient that working with lists.



# compare the size of two functions using the 'getsizeof' method
def firstn(n):
    nums = []
    num = 0
    while num < n:
        nums.append(num)
        num += 1
    return nums

def firstn_generator(n):    # more memory efficient as it doesn't require the list
    num = 0
    while num < n:
        yield num
        num += 1

print(sys.getsizeof(firstn(1000000)))                   # This gives the size of the entire list in memory.
print(sys.getsizeof(firstn_generator(1000000)))         # This gives the size of the generator object itself.


print(timeit.timeit(stmt="firstn(1000)", globals=globals(), number=1000))
print(timeit.timeit(stmt="firstn_generator(1000)", globals=globals(), number=1000))


#NOTE
'''
    It is important to note that the sys.getsizeof() returns the size of the generator object itself, not the size of all items it can generate. This is why it shows a much smaller size compared to the list, which generates a complete list in memory.

        print(sys.getsizeof(firstn(1000000)))               # This gives the size of the entire list in memory.
        print(sys.getsizeof(firstn_generator(1000000)))     # This gives the size of the generator object itself.

    To illustrate the memory efficiency of a generator, you'd typically compare the memory used when iterating over the list vs. iterating over the generator. However, sys.getsizeof() isn't the right tool for measuring the memory usage of all items yielded by a generator, as it doesn't accumulate the size of each item generated.

'''


# Calculate the size of the list
list_size = sum(sys.getsizeof(num) for num in firstn(1000))
print(f"Size of list: {list_size} bytes")

# Calculate the size of each item generated by the generator
generator_size = sum(sys.getsizeof(num) for num in firstn_generator(1000))
print(f"Size of all items generated: {generator_size} bytes")

# Size of the generator object itself
generator_object_size = sys.getsizeof(firstn_generator(1000))
print(f"Size of generator object: {generator_object_size} bytes")

'''
    The shows that the list and generator use similar space in memory when considering the entire elements
'''